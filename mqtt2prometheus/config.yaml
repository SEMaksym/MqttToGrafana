mqtt:
 # The MQTT broker to connect to
 server: tcp://mosquitto:1883
 
 # The Topic path to subscribe to. Be aware that you have to specify the wildcard, if you want to follow topics for multiple sensors.
 topic_path: "#"
 # Optional: Regular expression to extract the device ID from the topic path. The default regular expression, assumes
 # that the last "element" of the topic_path is the device id.
 # The regular expression must contain a named capture group with the name deviceid
 # For example the expression for tasamota based sensors is "tele/(?P<deviceid>.*)/.*"
 device_id_regex: "(.*/)?devices/(?P<deviceid>.*)/.*"
 # The MQTT QoS level
 qos: 0
 # NOTE: Only one of metric_per_topic_config or object_per_topic_config should be specified in the configuration
 # A regex used for extracting the metric name from the topic. Must contain a named group for `metricname`.
 # metric_name_regex: "(.*/)?(?P<metricname>.*)"
 
 
cache:
 # Timeout. Each received metric will be presented for this time if no update is send via MQTT.
 # Set the timeout to -1 to disable the deletion of metrics from the cache. The exporter presents the ingest timestamp
 # to prometheus.
 timeout: 24h
 # Path to the directory to keep the state for monotonic metrics.
 state_directory: "/var/lib/mqtt2prometheus"
json_parsing:
 # Separator. Used to split path to elements when accessing json fields.
 # You can access json fields with dots in it. F.E. {"key.name": {"nested": "value"}}
 # Just set separator to -> and use key.name->nested as mqtt_name
 separator: .
# This is a list of valid metrics. Only metrics listed here will be exported
metrics:
 - prom_name: mqtt2prometheus_temperature
   mqtt_name: "t"
   help: "Temperature"
   type: gauge
   const_labels:
     sensor_type: t  

- prom_name: mqtt2prometheus_humidity
  mqtt_name: "h"
  help: "humidity"
  type: gauge
  const_labels:
    sensor_type: t     

- prom_name: mqtt2prometheus_wind
  mqtt_name: "w"
  help: "wind"
  type: gauge
  const_labels:
    sensor_type: t 